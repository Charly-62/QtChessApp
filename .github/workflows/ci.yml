name: CI and Build Workflow

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

concurrency:
  group: deploy-gh-pages
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Qt and Build Tools
        run: |
          sudo apt-get update
          sudo apt-get install -y qt5-qmake qtbase5-dev make
      - name: Build Project
        run: |
          mkdir -p build
          cd build
          qmake ../schach/schach.pro
          make
      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: build/*

  docs:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Doxygen
        run: sudo apt-get install -y doxygen

      - name: Generate Documentation
        run: |
          mkdir -p docs
          cd docs
          doxygen Doxyfile
      - name: Upload Docs Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: docs-artifacts
          path: docs/*

  deploy:
    runs-on: ubuntu-latest
    needs: docs

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: build

      - name: Download Docs Artifacts
        uses: actions/download-artifact@v4
        with:
          name: docs-artifacts
          path: docs

      - name: Prepare Deployment Directory
        run: |
          mkdir -p deploy/build
          cp -r build/* deploy/build/
          cp -r docs/html/* deploy/
          touch deploy/.nojekyll
      - name: Deploy to GitHub Pages
        if: github.ref == 'refs/heads/master'
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./deploy
          allow_empty_commit: true

  build-binaries:
    needs: build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-20.04, macos-latest, windows-latest]  # Changed from ubuntu-latest to ubuntu-20.04
      fail-fast: false

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Install Python 3.x if needed
      - name: Set up Python 3.x
        if: runner.os != 'Windows'
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Set up Qt
        uses: jurplel/install-qt-action@v3
        with:
          version: '5.15.2'
          setup-python: true
          host: ${{ matrix.os == 'windows-latest' && 'windows' || matrix.os == 'macos-latest' && 'mac' || 'linux' }}
          target: 'desktop'
          arch: ${{ matrix.os == 'windows-latest' && 'win64_msvc2019_64' || matrix.os == 'macos-latest' && 'clang_64' || 'gcc_64' }}
        env:
          AQT_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Install Dependencies for Linux
      - name: Install Dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential libgl1-mesa-dev libx11-dev
        shell: /bin/bash -e {0}

      # Install Dependencies for macOS
      - name: Install Dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew update
          brew list pkg-config || brew install pkg-config
          brew list openssl@3 || brew install openssl@3
        shell: /bin/bash -e {0}

      # Install Dependencies for Windows
      - name: Install Dependencies (Windows)
        if: runner.os == 'Windows'
        run: |
          choco install git -y
          choco install cmake -y
        shell: powershell

      # Build Project for Linux and macOS
      - name: Build Project (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          mkdir build
          cd build
          qmake ../schach/schach.pro "CONFIG+=release"
          make
        shell: /bin/bash -e {0}

      # Deploy Qt Libraries (macOS)
      - name: Deploy Qt Libraries (macOS)
        if: runner.os == 'macOS'
        run: |
          cd build
          macdeployqt schach.app
        shell: /bin/bash -e {0}

      # Deploy Qt Libraries (Linux)
      - name: Deploy Qt Libraries (Linux)
        if: runner.os == 'Linux'
        run: |
          cd build
          # Download linuxdeployqt
          wget -O linuxdeployqt.AppImage https://github.com/probonopd/linuxdeployqt/releases/download/continuous/linuxdeployqt-continuous-x86_64.AppImage
          chmod +x linuxdeployqt.AppImage
      
          # Create the AppDir structure
          mkdir -p AppDir/usr/bin
          mkdir -p AppDir/usr/share/applications
          mkdir -p AppDir/usr/share/icons/hicolor/256x256/apps
      
          # Copy the binary and .desktop file into AppDir
          cp schach AppDir/usr/bin/
          cp ../schach/schach.desktop AppDir/usr/share/applications/
      
          # Copy the icon if it exists
          ICON_PATH="../schach/icons/schach.png"
          if [ -f "$ICON_PATH" ]; then
            cp "$ICON_PATH" AppDir/usr/share/icons/hicolor/256x256/apps/
          else
            echo "Icon file not found at $ICON_PATH, skipping icon copy."
          fi
      
          # Ensure the binary is executable
          chmod +x AppDir/usr/bin/schach
      
          # Validate the .desktop file
          sudo apt-get install -y desktop-file-utils
          desktop-file-validate AppDir/usr/share/applications/schach.desktop
          if [ $? -ne 0 ]; then
            echo "Invalid .desktop file."
            exit 1
          fi
      
          # List AppDir contents for debugging
          echo "Contents of AppDir:"
          find AppDir
      
          # Run linuxdeployqt with the path to the .desktop file
          ./linuxdeployqt.AppImage AppDir/usr/share/applications/schach.desktop -appimage
      
          # List files after running linuxdeployqt
          echo "Files in build dir after linuxdeployqt:"
          ls -l
      
          # Check if the AppImage was created
          if [ -f Schach*.AppImage ]; then
            echo "AppImage created successfully."
            # Move the generated AppImage to the parent directory
            mv Schach*.AppImage ../Schach-4444bb1-x86_64.AppImage
          else
            echo "AppImage not found. linuxdeployqt may have failed."
            exit 1
          fi
        shell: /bin/bash -e {0}

      # Build Project for Windows
      - name: Build Project (Windows)
        if: runner.os == 'Windows'
        shell: cmd
        run: |
          "C:\Program Files (x86)\Microsoft Visual Studio\Installer\vswhere.exe" -latest -property installationPath > vs_path.txt
          set /p VS_PATH=<vs_path.txt
          call "%VS_PATH%\VC\Auxiliary\Build\vcvars64.bat"
          mkdir build
          cd build
          qmake ../schach/schach.pro -spec win32-msvc "CONFIG+=release"
          nmake

      # List Build Directory (Windows) for Debugging
      - name: List Build Directory (Windows)
        if: runner.os == 'Windows'
        shell: cmd
        run: |
          echo "Contents of build directory:"
          dir build
          echo "Contents of build\\release directory:"
          dir build\release

      # Deploy Qt Libraries (Windows)
      - name: Deploy Qt Libraries (Windows)
        if: runner.os == 'Windows'
        shell: cmd
        run: |
          cd build\release
          if exist schach.exe (
            echo "schach.exe found. Running windeployqt..."
            windeployqt schach.exe
          ) else (
            echo "Error: schach.exe not found in build\release."
            exit /b 1
          )

      # Clean Build Directories
      - name: Clean Build Directory (Windows)
        if: runner.os == 'Windows'
        shell: cmd
        run: |
          cd build\release
          del *.obj *.cpp *.h *.o

      - name: Clean Build Directory (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          cd build
          find . -type f \( -name '*.o' -o -name '*.obj' -o -name '*.cpp' -o -name '*.h' \) -delete

      # Package Build for macOS
      - name: Package Build (macOS)
        if: runner.os == 'macOS'
        run: |
          cd build
          zip -r ../QtChessApp_macOS.zip schach.app
        shell: /bin/bash -e {0}

      # Package Build for Linux
      - name: Package Build (Linux)
        if: runner.os == 'Linux'
        run: |
          chmod +x Schach-4444bb1-x86_64.AppImage
          mv Schach-4444bb1-x86_64.AppImage QtChessApp_Linux.AppImage
        shell: /bin/bash -e {0}

      # Package Build for Windows
      - name: Package Build (Windows)
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          # Define an intermediate deployment folder
          $deployFolder = "QtChessApp_Windows"
          
          # Create the deployment folder
          mkdir $deployFolder
          
          # Copy all build artifacts into the deployment folder
          Copy-Item -Path "build\release\*" -Destination $deployFolder -Recurse
          
          # Compress the deployment folder into a zip file
          Compress-Archive -Path "$deployFolder" -DestinationPath "QtChessApp_Windows.zip" -Force
          
          # (Optional) Remove the deployment folder after zipping
          Remove-Item -Recurse -Force $deployFolder

      # Upload Binaries
      - name: Upload Binaries
        uses: actions/upload-artifact@v4
        with:
          name: QtChessApp-${{ matrix.os }}
          path: |
            QtChessApp_Windows.zip
            QtChessApp_macOS.zip
            QtChessApp_Linux.AppImage
          retention-days: 30

  deploy-release:
    needs: build-binaries
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Download Artifacts
      - name: Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: QtChessApp-windows-latest
          path: ./windows
      - name: Download macOS Build Artifact
        uses: actions/download-artifact@v4
        with:
          name: QtChessApp-macos-latest
          path: ./macos
      - name: Download Linux Build Artifact
        uses: actions/download-artifact@v4
        with:
          name: QtChessApp-ubuntu-20.04
          path: ./linux

      # Create Release and Upload Assets
      - name: Create GitHub Release
        uses: ncipollo/release-action@v1
        with:
          artifacts: |
            ./windows/QtChessApp_Windows.zip
            ./macos/QtChessApp_macOS.zip
            ./linux/QtChessApp_Linux.AppImage
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: 'v1.0.${{ github.run_number }}'
          name: 'Release v1.0.${{ github.run_number }}'
          draft: false
          prerelease: false
