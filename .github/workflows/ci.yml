name: CI Workflow

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

concurrency:
  group: deploy-gh-pages
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Qt and Build Tools
        run: |
          sudo apt-get update
          sudo apt-get install -y qt5-qmake qtbase5-dev make

      - name: Build Project
        run: |
          mkdir -p build
          cd build
          qmake ../schach/schach.pro
          make

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: build/*

  docs:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Doxygen
        run: sudo apt-get install -y doxygen

      - name: Generate Documentation
        run: |
          mkdir -p docs
          cd docs
          doxygen Doxyfile

      - name: Upload Docs Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: docs-artifacts
          path: docs/*

  build-binaries:
    runs-on: ${{ matrix.os }}
    needs: [build, docs]
    strategy:
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Qt
        uses: jurplel/install-qt-action@v2
        with:
          version: '5.15.2'

      - name: Install Dependencies
        run: |
          if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
            sudo apt-get update
            sudo apt-get install -y build-essential
          elif [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            brew install <your-dependencies>  # Replace with actual dependencies
          elif [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            choco install <your-dependencies> -y  # Replace with actual dependencies
          fi

      - name: Build Project
        run: |
          mkdir build
          cd build
          qmake ../schach/schach.pro
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            nmake  # or 'jom' if you're using it
          else
            make
          fi

      - name: Package Build
        run: |
          cd build
          if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
            zip -r ../QtChessApp_Linux.zip *
          elif [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            zip -r ../QtChessApp_macOS.zip *
          elif [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            zip -r ../QtChessApp_Windows.zip *
          fi

      - name: Upload Binaries
        uses: actions/upload-artifact@v4
        with:
          name: QtChessApp-${{ matrix.os }}
          path: |
            QtChessApp_Linux.zip
            QtChessApp_macOS.zip
            QtChessApp_Windows.zip

  deploy:
    runs-on: ubuntu-latest
    needs: build-binaries

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: build

      - name: Download Docs Artifacts
        uses: actions/download-artifact@v4
        with:
          name: docs-artifacts
          path: docs

      - name: Download Binaries
        uses: actions/download-artifact@v4
        with:
          name: QtChessApp-*
          path: binaries

      - name: Prepare Deployment Directory
        run: |
          mkdir -p deploy/build
          mkdir -p deploy/binaries
          cp -r build/* deploy/build/
          cp -r docs/html/* deploy/
          cp -r binaries/* deploy/binaries/
          touch deploy/.nojekyll

      - name: Verify Deployment Directory
        run: |
          echo "Contents of deploy/:"
          ls -la deploy/
          echo "Contents of deploy/build/:"
          ls -la deploy/build/
          echo "Contents of deploy/binaries/:"
          ls -la deploy/binaries/

      - name: Deploy Documentation to GitHub Pages
        if: github.ref == 'refs/heads/master'
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./deploy
          allow_empty_commit: true

  create-release:
    runs-on: ubuntu-latest
    needs: deploy

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v1.0.${{ github.run_number }}  # Customize your versioning
          release_name: Release v1.0.${{ github.run_number }}
          draft: false
          prerelease: false

      - name: Upload Release Asset (Windows)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./deploy/binaries/QtChessApp_Windows.zip
          asset_name: QtChessApp_Windows.zip
          asset_content_type: application/zip

      - name: Upload Release Asset (Linux)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./deploy/binaries/QtChessApp_Linux.zip
          asset_name: QtChessApp_Linux.zip
          asset_content_type: application/zip

      - name: Upload Release Asset (macOS)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./deploy/binaries/QtChessApp_macOS.zip
          asset_name: QtChessApp_macOS.zip
          asset_content_type: application/zip
