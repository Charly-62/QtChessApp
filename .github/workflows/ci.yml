name: CI and Build Workflow

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

concurrency:
  group: deploy-gh-pages
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Qt and Build Tools
        run: |
          sudo apt-get update
          sudo apt-get install -y qt5-qmake qtbase5-dev make

      - name: Build Project
        run: |
          mkdir -p build
          cd build
          qmake ../schach/schach.pro
          make

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: build/*

  docs:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Doxygen
        run: sudo apt-get install -y doxygen

      - name: Generate Documentation
        run: |
          mkdir -p docs
          cd docs
          doxygen Doxyfile

      - name: Upload Docs Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: docs-artifacts
          path: docs/*

  deploy:
    runs-on: ubuntu-latest
    needs: [build, docs]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: build

      - name: Download Docs Artifacts
        uses: actions/download-artifact@v4
        with:
          name: docs-artifacts
          path: docs

      - name: Prepare Deployment Directory
        run: |
          mkdir -p deploy/build
          cp -r build/* deploy/build/
          cp -r docs/html/* deploy/
          touch deploy/.nojekyll

      - name: Deploy to GitHub Pages
        if: github.ref == 'refs/heads/master'
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./deploy
          allow_empty_commit: true

  build-binaries:
    needs: deploy
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
      fail-fast: false

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Cache Qt Installation
        uses: actions/cache@v3
        with:
          path: ${{ runner.os == 'Windows' && 'C:\\Qt' || '~/Qt' }}
          key: ${{ runner.os }}-qt-5.15.2
          restore-keys: |
            ${{ runner.os }}-qt-

      - name: Set up Qt
        uses: jurplel/install-qt-action@v2
        with:
          version: '5.15.2'
          cached: true
        env:
          AQT_GITHUB_TOKEN: ${{ secrets.AQT_PAT }}

      # Install Dependencies for Linux
      - name: Install Dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential libgl1-mesa-dev libx11-dev
        shell: /bin/bash -e {0}

      # Install Dependencies for macOS
      - name: Install Dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew update
          brew install pkg-config
          brew install openssl
        shell: /bin/bash -e {0}

      # Install Dependencies for Windows
      - name: Install Dependencies (Windows)
        if: runner.os == 'Windows'
        run: |
          choco install git -y
          choco install cmake -y
        shell: powershell

      # Setup MSVC environment for Windows
      - name: Setup MSVC
        if: runner.os == 'Windows'
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x64

      # Build Project for Linux and macOS
      - name: Build Project (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          mkdir build
          cd build
          qmake ../schach/schach.pro
          make
        shell: /bin/bash -e {0}

      # Build Project for Windows
      - name: Build Project (Windows)
        if: runner.os == 'Windows'
        shell: cmd
        run: |
          mkdir build
          cd build
          qmake ../schach/schach.pro
          nmake

      # Package Build for Linux and macOS
      - name: Package Build (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          cd build
          zip -r ../QtChessApp_${{ runner.os }}.zip *
        shell: /bin/bash -e {0}

      # Package Build for Windows
      - name: Package Build (Windows)
        if: runner.os == 'Windows'
        run: |
          cd build
          Compress-Archive -Path * -DestinationPath ../QtChessApp_Windows.zip
        shell: powershell

      # Upload Binaries
      - name: Upload Binaries
        uses: actions/upload-artifact@v4
        with:
          name: QtChessApp-${{ matrix.os }}
          path: |
            QtChessApp_*.zip
          retention-days: 30
